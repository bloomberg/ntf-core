// Copyright 2023 Bloomberg Finance L.P.
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef INCLUDED_NTSU_TIMESTAMPUTIL
#define INCLUDED_NTSU_TIMESTAMPUTIL

#include <bsls_ident.h>
BSLS_IDENT("$Id: $")

#include <ntscfg_platform.h>
#include <ntsscm_version.h>
#include <bsl_cstddef.h>

namespace BloombergLP {
namespace ntsu {

/// @internal @brief 
/// Redefine types and constants used for Linux network timestamping in a 
/// portable way, independant of any operating system headers and content of
/// those headers that may or may not be present on the build machine.
///
/// @details
/// The following caveats apply to timestamping support:
///
/// @li Timestamping is only supported for Linux kernel versions >= 4.18.0.
///
/// @li Timestamping is only supported for TCP and UDP sockets.
///
/// @li Outgoing timestamping may only be enabled for TCP sockets when they are
/// in the connected state.
///
/// @par Flags
/// This class is declares the following flags.
///
/// @li @b SOF_TIMESTAMPING_RX_HARDWARE:
/// Return the original, unmodified time stamp as generated by the hardware.
///
/// @li @b SOF_TIMESTAMPING_RX_SOFTWARE:
/// If SOF_TIMESTAMPING_RX_HARDWARE is off or fails, then do it in
/// software.
///
/// @li @b SOF_TIMESTAMPING_RAW_HARDWARE:
/// Return original raw hardware time stamp.
///
/// @li @b SOF_TIMESTAMPING_SOFTWARE:
/// Return system time stamp generated in software.
///
/// @ingroup module_ntsu
struct TimestampUtil {
    enum {
        e_SCM_TSTAMP_SND = 0,
        e_SCM_TSTAMP_SCHED = 1,
        e_SCM_TSTAMP_ACK = 2,

        e_SO_TIMESTAMPNS   = 35,
        e_SO_TIMESTAMPING  = 37,
        e_SCM_TIMESTAMPNS  = e_SO_TIMESTAMPNS,
        e_SCM_TIMESTAMPING = e_SO_TIMESTAMPING,

        // Timestamp generation.
        e_SOF_TIMESTAMPING_TX_HARDWARE = (1 << 0),
        e_SOF_TIMESTAMPING_TX_SOFTWARE = (1 << 1),
        e_SOF_TIMESTAMPING_TX_SCHED = (1 << 8),
        e_SOF_TIMESTAMPING_TX_ACK = (1 << 9),
        e_SOF_TIMESTAMPING_RX_HARDWARE = (1 << 2),
        e_SOF_TIMESTAMPING_RX_SOFTWARE = (1 << 3),

        e_SOF_TIMESTAMPING_TX_GENERATION = 
            e_SOF_TIMESTAMPING_TX_HARDWARE |
            e_SOF_TIMESTAMPING_TX_SOFTWARE |
            e_SOF_TIMESTAMPING_TX_SCHED |
            e_SOF_TIMESTAMPING_TX_ACK,

        e_SOF_TIMESTAMPING_RX_GENERATION = 
            e_SOF_TIMESTAMPING_RX_HARDWARE |
            e_SOF_TIMESTAMPING_RX_SOFTWARE,

        // Timestamp reporting.
        e_SOF_TIMESTAMPING_SOFTWARE    = (1 << 4),
        e_SOF_TIMESTAMPING_RAW_HARDWARE = (1 << 6),

        e_SOF_TIMESTAMPING_REPORTING = e_SOF_TIMESTAMPING_SOFTWARE |
                                       e_SOF_TIMESTAMPING_RAW_HARDWARE,

        // Timestamp options.
        e_SOF_TIMESTAMPING_OPT_ID       = (1 << 7),
        e_SOF_TIMESTAMPING_OPT_TSONLY   = (1 << 11),

        e_SOF_TIMESTAMPING_OPTIONS = e_SOF_TIMESTAMPING_OPT_ID |
                                     e_SOF_TIMESTAMPING_OPT_TSONLY
    };

    // Copy of Linux 'struct timespec'.
    struct Timespec {
        long tv_sec;
        long tv_nsec;
    };

    // Copy of linux 'struct scm_timestamping'.
    struct ScmTimestamping {  
        Timespec softwareTs;
        Timespec deprecated;
        Timespec hardwareTs;
    };

    /// Return true if the specified operation system 'versionMajor',
    /// 'versionMinor', and 'versionPatch' supports the specified 'option'
    /// flag, otherwise return false.
    static bool supportsOption(int option, 
                               int versionMajor, 
                               int versionMinor, 
                               int versionPatch);


    /// Return the specified 'options' with all bits representing unsupported
    /// options removed. 
    static int removeUnsupported(int options);

    /// Return a formatted, human readable description of the specified 
    /// 'duration'. 
    static bsl::string describeDelay(const bsls::TimeInterval& duration);
};

}  // close package namespace
}  // close enterprise namespace

#endif
