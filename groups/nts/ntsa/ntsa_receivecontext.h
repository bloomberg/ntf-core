// Copyright 2020-2023 Bloomberg Finance L.P.
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef INCLUDED_NTSA_RECEIVECONTEXT
#define INCLUDED_NTSA_RECEIVECONTEXT

#include <bsls_ident.h>
BSLS_IDENT("$Id: $")

#include <ntsa_endpoint.h>
#include <ntsa_handle.h>
#include <ntscfg_platform.h>
#include <ntsscm_version.h>
#include <bdlb_nullablevalue.h>
#include <bslh_hash.h>
#include <bsl_iosfwd.h>

namespace BloombergLP {
namespace ntsa {

/// Provide a description of the result of a receive operation.
///
/// @details
/// Provide a value-semantic type that describes the result of a
/// receive operation.
///
/// @par Attributes
/// This class is composed of the following attributes.
///
/// @li @b endpoint:
/// The remote endpoint from which the data was received. If this value is
/// null, the data was received from the remote endpoint to which the socket is
/// connected.
///
/// @li @b bytesReceivable:
/// The number of bytes attempted to copy from the socket receive buffer.
///
/// @li @b bytesReceived:
/// The actual number of bytes copied from the socket receive buffer.
///
/// @li @b buffersReceivable:
/// The number of buffers attempted to copy from the socket receive buffer.
///
/// @li @b buffersReceived:
/// The actual number of buffers copied from the socket receive buffer.
///
/// @li @b messagesReceivable:
/// The number of messages attempted to copy from the socket receive buffer.
/// This value is only relevant when copying from the receive buffer of a
/// datagram socket.
///
/// @li @b messagesReceived:
/// The actual number of messages copied from the socket receive buffer. This
/// value is only relevant when copying from the receive buffer of a datagram
/// socket.
///
/// @li @b softwareTimestamp:
/// The timestamp of the incoming data applied by software, if any.
///
/// @li @b hardwareTimestamp:
/// The timestamp of the incoming data applied by hardware, if any.
///
/// @li @b foreignHandle:
/// The foreign handle sent by the peer, if any. If a foreign handle is 
/// defined, it is the receivers responsibility to close it.
///
/// @par Thread Safety
/// This class is not thread safe.
///
/// @ingroup module_ntsa_operation
class ReceiveContext
{
    bdlb::NullableValue<ntsa::Endpoint>     d_endpoint;
    bsl::size_t                             d_bytesReceivable;
    bsl::size_t                             d_bytesReceived;
    bsl::size_t                             d_buffersReceivable;
    bsl::size_t                             d_buffersReceived;
    bsl::size_t                             d_messagesReceivable;
    bsl::size_t                             d_messagesReceived;
    bdlb::NullableValue<bsls::TimeInterval> d_softwareTimestamp;
    bdlb::NullableValue<bsls::TimeInterval> d_hardwareTimestamp;
    bdlb::NullableValue<ntsa::Handle>       d_foreignHandle;

  public:
    /// Create new receive options having the default value.
    ReceiveContext();

    /// Create new receive options having the same value as the specified
    /// 'original' object.
    ReceiveContext(const ReceiveContext& original);

    /// Destroy this object.
    ~ReceiveContext();

    /// Assign the value of the specified 'other' object to this object.
    /// Return a reference to this modifiable object.
    ReceiveContext& operator=(const ReceiveContext& other);

    /// Reset the value of this object to its value upon default
    /// construction.
    void reset();

    /// Set the remote endpoint from which the data was received.
    void setEndpoint(const ntsa::Endpoint& value);

    /// Set the number of bytes attempted to be received to the specified
    /// 'value'.
    void setBytesReceivable(bsl::size_t value);

    /// Set the number of bytes actually received to the specified 'value'.
    void setBytesReceived(bsl::size_t value);

    /// Set the number of buffers attempted to be received to the specified
    /// 'value'.
    void setBuffersReceivable(bsl::size_t value);

    /// Set the number of buffers actually received to the specified
    /// 'value'.
    void setBuffersReceived(bsl::size_t value);

    /// Set the number of messages attempted to be received to the specified
    /// 'value'.
    void setMessagesReceivable(bsl::size_t value);

    /// Set the number of messages actually received to the specified
    /// 'value'.
    void setMessagesReceived(bsl::size_t value);

    /// Set timestamp generated by software to the specified 'value'.
    void setSoftwareTimestamp(const bsls::TimeInterval& value);

    /// Set timestamp generated by harware to the specified 'value'.
    void setHardwareTimestamp(const bsls::TimeInterval& value);

    /// Set the foreign handle sent by the peer to the specified 'value'. 
    void setForeignHandle(ntsa::Handle value);

    /// Return the remote endpoint from which the data was received.
    const bdlb::NullableValue<ntsa::Endpoint>& endpoint() const;

    /// Return the number of bytes attempted to be received.
    bsl::size_t bytesReceivable() const;

    /// Return the number of bytes actually received.
    bsl::size_t bytesReceived() const;

    /// Return the number of buffers attempted to be received.
    bsl::size_t buffersReceivable() const;

    /// Return the number of buffers actually received.
    bsl::size_t buffersReceived() const;

    /// Return the number of messages attempted to be received.
    bsl::size_t messagesReceivable() const;

    /// Return the number of messages actually received.
    bsl::size_t messagesReceived() const;

    /// Return the timestamp generated by software, if any.
    const bdlb::NullableValue<bsls::TimeInterval>& softwareTimestamp() const;

    /// Return the timestamp generated by hardware, if any.
    const bdlb::NullableValue<bsls::TimeInterval>& hardwareTimestamp() const;

    /// Return the foreign handle sent by the peer, if any.
    const bdlb::NullableValue<ntsa::Handle>& foreignHandle() const;

    /// Return true if this object has the same value as the specified
    /// 'other' object, otherwise return false.
    bool equals(const ReceiveContext& other) const;

    /// Return true if the value of this object is less than the value of
    /// the specified 'other' object, otherwise return false.
    bool less(const ReceiveContext& other) const;

    /// Format this object to the specified output 'stream' at the
    /// optionally specified indentation 'level' and return a reference to
    /// the modifiable 'stream'.  If 'level' is specified, optionally
    /// specify 'spacesPerLevel', the number of spaces per indentation level
    /// for this and all of its nested objects.  Each line is indented by
    /// the absolute value of 'level * spacesPerLevel'.  If 'level' is
    /// negative, suppress indentation of the first line.  If
    /// 'spacesPerLevel' is negative, suppress line breaks and format the
    /// entire output on one line.  If 'stream' is initially invalid, this
    /// operation has no effect.  Note that a trailing newline is provided
    /// in multiline mode only.
    bsl::ostream& print(bsl::ostream& stream,
                        int           level          = 0,
                        int           spacesPerLevel = 4) const;

    /// Defines the traits of this type. These traits can be used to select,
    /// at compile-time, the most efficient algorithm to manipulate objects
    /// of this type.
    NTSCFG_DECLARE_NESTED_BITWISE_MOVABLE_TRAITS(ReceiveContext);
};

/// Write the specified 'object' to the specified 'stream'. Return
/// a modifiable reference to the 'stream'.
///
/// @related ntsa::ReceiveContext
bsl::ostream& operator<<(bsl::ostream& stream, const ReceiveContext& object);

/// Return true if the specified 'lhs' has the same value as the specified
/// 'rhs', otherwise return false.
///
/// @related ntsa::ReceiveContext
bool operator==(const ReceiveContext& lhs, const ReceiveContext& rhs);

/// Return true if the specified 'lhs' does not have the same value as the
/// specified 'rhs', otherwise return false.
///
/// @related ntsa::ReceiveContext
bool operator!=(const ReceiveContext& lhs, const ReceiveContext& rhs);

/// Return true if the value of the specified 'lhs' is less than the value
/// of the specified 'rhs', otherwise return false.
///
/// @related ntsa::ReceiveContext
bool operator<(const ReceiveContext& lhs, const ReceiveContext& rhs);

/// Contribute the values of the salient attributes of the specified 'value'
/// to the specified hash 'algorithm'.
///
/// @related ntsa::ReceiveContext
template <typename HASH_ALGORITHM>
void hashAppend(HASH_ALGORITHM& algorithm, const ReceiveContext& value);

NTSCFG_INLINE
ReceiveContext::ReceiveContext()
: d_endpoint()
, d_bytesReceivable(0)
, d_bytesReceived(0)
, d_buffersReceivable(0)
, d_buffersReceived(0)
, d_messagesReceivable(0)
, d_messagesReceived(0)
, d_softwareTimestamp()
, d_hardwareTimestamp()
, d_foreignHandle()
{
}

NTSCFG_INLINE
ReceiveContext::ReceiveContext(const ReceiveContext& original)
: d_endpoint(original.d_endpoint)
, d_bytesReceivable(original.d_bytesReceivable)
, d_bytesReceived(original.d_bytesReceived)
, d_buffersReceivable(original.d_buffersReceivable)
, d_buffersReceived(original.d_buffersReceived)
, d_messagesReceivable(original.d_messagesReceivable)
, d_messagesReceived(original.d_messagesReceived)
, d_softwareTimestamp(original.d_softwareTimestamp)
, d_hardwareTimestamp(original.d_hardwareTimestamp)
, d_foreignHandle(original.d_foreignHandle)
{
}

NTSCFG_INLINE
ReceiveContext::~ReceiveContext()
{
}

NTSCFG_INLINE
ReceiveContext& ReceiveContext::operator=(const ReceiveContext& other)
{
    d_endpoint           = other.d_endpoint;
    d_bytesReceivable    = other.d_bytesReceivable;
    d_bytesReceived      = other.d_bytesReceived;
    d_buffersReceivable  = other.d_buffersReceivable;
    d_buffersReceived    = other.d_buffersReceived;
    d_messagesReceivable = other.d_messagesReceivable;
    d_messagesReceived   = other.d_messagesReceived;
    d_softwareTimestamp  = other.d_softwareTimestamp;
    d_hardwareTimestamp  = other.d_hardwareTimestamp;
    d_foreignHandle      = other.d_foreignHandle;

    return *this;
}

NTSCFG_INLINE
void ReceiveContext::reset()
{
    d_endpoint.reset();
    d_bytesReceivable    = 0;
    d_bytesReceived      = 0;
    d_buffersReceivable  = 0;
    d_buffersReceived    = 0;
    d_messagesReceivable = 0;
    d_messagesReceived   = 0;
    d_softwareTimestamp.reset();
    d_hardwareTimestamp.reset();
    d_foreignHandle.reset();
}

NTSCFG_INLINE
void ReceiveContext::setEndpoint(const ntsa::Endpoint& value)
{
    d_endpoint = value;
}

NTSCFG_INLINE
void ReceiveContext::setBytesReceivable(bsl::size_t value)
{
    d_bytesReceivable = value;
}

NTSCFG_INLINE
void ReceiveContext::setBytesReceived(bsl::size_t value)
{
    d_bytesReceived = value;
}

NTSCFG_INLINE
void ReceiveContext::setBuffersReceivable(bsl::size_t value)
{
    d_buffersReceivable = value;
}

NTSCFG_INLINE
void ReceiveContext::setBuffersReceived(bsl::size_t value)
{
    d_buffersReceived = value;
}

NTSCFG_INLINE
void ReceiveContext::setMessagesReceivable(bsl::size_t value)
{
    d_messagesReceivable = value;
}

NTSCFG_INLINE
void ReceiveContext::setMessagesReceived(bsl::size_t value)
{
    d_messagesReceived = value;
}

NTSCFG_INLINE
void ReceiveContext::setSoftwareTimestamp(const bsls::TimeInterval& value)
{
    d_softwareTimestamp = value;
}

NTSCFG_INLINE
void ReceiveContext::setHardwareTimestamp(const bsls::TimeInterval& value)
{
    d_hardwareTimestamp = value;
}

NTSCFG_INLINE
void ReceiveContext::setForeignHandle(ntsa::Handle value)
{
    d_foreignHandle = value;
}

NTSCFG_INLINE
const bdlb::NullableValue<ntsa::Endpoint>& ReceiveContext::endpoint() const
{
    return d_endpoint;
}

NTSCFG_INLINE
bsl::size_t ReceiveContext::bytesReceivable() const
{
    return d_bytesReceivable;
}

NTSCFG_INLINE
bsl::size_t ReceiveContext::bytesReceived() const
{
    return d_bytesReceived;
}

NTSCFG_INLINE
bsl::size_t ReceiveContext::buffersReceivable() const
{
    return d_buffersReceivable;
}

NTSCFG_INLINE
bsl::size_t ReceiveContext::buffersReceived() const
{
    return d_buffersReceived;
}

NTSCFG_INLINE
bsl::size_t ReceiveContext::messagesReceivable() const
{
    return d_messagesReceivable;
}

NTSCFG_INLINE
bsl::size_t ReceiveContext::messagesReceived() const
{
    return d_messagesReceived;
}

NTSCFG_INLINE
const bdlb::NullableValue<bsls::TimeInterval>& ReceiveContext::
    softwareTimestamp() const
{
    return d_softwareTimestamp;
}

NTSCFG_INLINE
const bdlb::NullableValue<bsls::TimeInterval>& ReceiveContext::
    hardwareTimestamp() const
{
    return d_hardwareTimestamp;
}

NTSCFG_INLINE
const bdlb::NullableValue<ntsa::Handle>& ReceiveContext::foreignHandle() const
{
    return d_foreignHandle;
}

NTSCFG_INLINE
bsl::ostream& operator<<(bsl::ostream& stream, const ReceiveContext& object)
{
    return object.print(stream, 0, -1);
}

NTSCFG_INLINE
bool operator==(const ReceiveContext& lhs, const ReceiveContext& rhs)
{
    return lhs.equals(rhs);
}

NTSCFG_INLINE
bool operator!=(const ReceiveContext& lhs, const ReceiveContext& rhs)
{
    return !operator==(lhs, rhs);
}

NTSCFG_INLINE
bool operator<(const ReceiveContext& lhs, const ReceiveContext& rhs)
{
    return lhs.less(rhs);
}

template <typename HASH_ALGORITHM>
void hashAppend(HASH_ALGORITHM& algorithm, const ReceiveContext& value)
{
    using bslh::hashAppend;

    hashAppend(algorithm, value.endpoint());
    hashAppend(algorithm, value.bytesReceivable());
    hashAppend(algorithm, value.bytesReceived());
    hashAppend(algorithm, value.buffersReceivable());
    hashAppend(algorithm, value.buffersReceived());
    hashAppend(algorithm, value.messagesReceivable());
    hashAppend(algorithm, value.messagesReceived());
    hashAppend(algorithm, value.softwareTimestamp());
    hashAppend(algorithm, value.hardwareTimestamp());
    hashAppend(algorithm, value.foreignHandle());
}

}  // close package namespace
}  // close enterprise namespace
#endif
